# 风格
1 名字
一个变量的作用域越大，它的名字所携带的信息就应该越多。
全局变量使用具有说明性的名字，局部变量用短名字。
根据定义，全局变量可以出现在整个程序中的任何地方，因此它们的名字应该足够长，具有足够的说明性，以便使读者能够记得
它们是干什么用的。给每个全局变量声明附一个简短注释也非常有帮助。

按常规方式使用的局部变量可以采用极短的名字。例如用 i、j作为循环变量，p、q作为
指针，s、t表示字符串等。

现实中存在许多命名约定或者本地习惯。常见的比如：
指针采用以 p结尾的变量名，例如nodep；
全局变量用大写开头的变量名，例如 G l o b a l；
常量用完全由大写字母拼写的变量名，如CONSTANTS等。
有些程序设计工场采用的规则更加彻底，他们要求把变量的类型和用途等都编排进变量名字中。
例如用 p c h说明这是一个字符指针，用 s t r T o和s t r F r o m表示它们分别是将要被读或者被写的字符串等。
至于名字本身的拼写形式，是使用 n p e n d i n g或n u m P e n d i n g还是n u m _ p e n d i n g，
这些不过是个人的喜好问题，与始终如一地坚持一种切合实际的约定相比，这些特殊规矩并不那么重要。

*** 保持一致性。
相关的东西应给以相关的名字，以说明它们的关系和差异。
*** 利用上下文
queue.queueCapacity ? 是多余的
queue.capacity //好的

*** 函数采用动作性的名字。函数名应当用动作性的动词，后面可以跟着名词

*** 对返回布尔类型值(真或者假)的函数命名，应该清楚地反映其返回值情况。
if(isoctal(c))

1.3 一致性和习惯用法
*** 使用一致的缩排和加括号风格。

*** 

1.4 函数宏
给宏的体和参数都加上括号。如果你真的要使用函数宏，那么请特别小心。宏是通过文本替
换方式实现的：定义体里的参数被调用的实际参数替换，得到的结果再作为文本去替换原来
的调用段。


1.5 神秘的数
神秘的数包括各种常数、数组的大小、字符位置、变换因子以及程序中出现的其他以文
字形式写出的数值。
(1) 给神秘的数起个名字。
数被揭掉了神秘的面纱，代码的意义也随之一目了然
了。

*** 把数定义为常数，不要定义为宏。
在 C++ 里任何类型都可使用const声明的常数：
在Java中可以用final声明：
C语言里也有const值，但它们不能用作数组的界。

*** 使用字符形式的常量，不要用整数。
利用语言去计算对象的大小。不要对任何数据类型使用显式写出来的大小。例如，我们应该
用s i z e o f(i n t) 而不是 2或者 4。基于同样原因，写 s i z e o f(a r r a y [ 0 ] ) 可能比
s i z e o f(i n t) 更好，因为即使是数组的类型改变了，也没有什么东西需要改变。

J a v a语言中的数组有一个l e n g t h域，它给出数组的元素个数

1.6 注释
最好的注释是简洁地点明程序的突出特征，或是提供一种概观，帮助别人理解程序。
*** 不要大谈明显的东西。

注释应该提供那些不能一下子从代码中看到的东西，或者把那些散布在许多代码里的信
息收集到一起。当某些难以捉摸的事情出现时，注释可以帮助澄清情况。

*** 给函数和全局数据加注释。
注释当然可以有价值。对于函数、全局变量、常数定义、结构和类的域等，
以及任何其他加上简短说明就能够帮助理解的内容，我们都应该为之提供注释。

有些代码原本非常复杂，可能是因为算法本身很复杂，或者是因为数据结构非常复杂。
在这些情况下，用一段注释指明有关文献对读者也很有帮助。此外，说明做出某种决定的理
由也很有价值。下面程序的注释介绍了逆离散余弦变换 (inverse discrete cosine transform，
D C T )的一个特别高效的实现，它用在一个 J P E G图像解码器里。

《熟练的C程序设计：深入C的奥密》













